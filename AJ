-- Fix for Rayfield not showing due to potential loadstring limitations
-- This approach attempts to directly execute the fetched script content.
local RayfieldScriptContent = game:HttpGet('https://sirius.menu/rayfield', true)
local Rayfield = nil

-- Attempt to execute the script content directly.
-- This is a common workaround for loadstring being disabled.
-- Note: This might not work on all executors if they have very strict sandboxing.
xpcall(function()
    Rayfield = loadstring(RayfieldScriptContent)()
end, function(err)
    warn("Failed to load Rayfield with loadstring:", err)
    -- Fallback for executors that might support direct execution differently
    -- This part is more speculative as executor behavior varies greatly.
    -- For most modern executors, the above loadstring inside xpcall should work
    -- if loadstring is enabled. If it's disabled, a direct execution might be needed.
    -- However, directly 'running' string content isn't a standard Roblox API.
    -- The common fix is often ensuring the executor itself enables loadstring.
    -- For demonstration, we'll assume the primary issue is loadstring's general availability
    -- and the user's executor *might* have a less restrictive environment for executed strings.
    -- Without knowing the specific executor, providing a universal fix for disabled loadstring is hard.
    -- The most common advice is to ensure your executor supports loadstring.

    -- If loadstring is genuinely disabled and no direct execution alternative exists,
    -- then the exploit itself needs to provide a way to load external scripts.
end)

if not Rayfield then
    Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
end

-- If Rayfield still isn't loaded, you might want to notify the user.
if not Rayfield then
    print("Rayfield failed to load. Please check your executor's settings for 'loadstring' or try a different executor.")
    -- You could also add a UI notification here if you have a basic one.
    return -- Exit the script if Rayfield didn't load
end

local Window = Rayfield:CreateWindow({
   Name = "üèòÔ∏è PENANDA HUB üèòÔ∏è",
   Icon = 0, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
   LoadingTitle = "üèòÔ∏è PENANDA HUB üèòÔ∏è",
   LoadingSubtitle = "by Arnel",
   ShowText = "Rayfield", -- for mobile users to unhide rayfield, change if you'd like
   Theme = "Default", -- Check https://docs.sirius.menu/rayfield/configuration/themes

   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface

   ConfigurationSaving = {
      Enabled = false,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "Big Hub"
   },

   Discord = {
      Enabled = false, -- Prompt the user to join your Discord server if their executor supports it
      Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },

   KeySystem = true, -- Set this to true to use our key system
   KeySettings = {
      Title = "üèòÔ∏è PENANDA HUB üèòÔ∏è",
      Subtitle = "Key System",
      Note = "Ask the Owner For The Key", -- Use this to tell the user how to get a key
      FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = false, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"Naruto"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})

Rayfield:Notify({
   Title = "üèòÔ∏è PENANDA HUB üèòÔ∏è",
   Content = "Please Share My Script üëâüëà",
   Duration = 6.5,
   Image = "rewind",
})

local MainTab = Window:CreateTab("üè† Main", 0) -- Title, Image

-- Variables for Infinite Jump toggle
local isInfiniteJumpEnabled = false
local jumpConnection = nil

local Button = MainTab:CreateButton({
   Name = "Infinite Jump",
   Callback = function()
       isInfiniteJumpEnabled = not isInfiniteJumpEnabled -- Toggle the state

       if isInfiniteJumpEnabled then
           -- Enable Infinite Jump
           jumpConnection = game:GetService("UserInputService").JumpRequest:Connect(function()
               local character = game:GetService("Players").LocalPlayer.Character
               if character and character:FindFirstChildOfClass('Humanoid') then
                   character:FindFirstChildOfClass'Humanoid':ChangeState("Jumping")
               end
           end)
           Rayfield:Notify({
               Title = "Infinite Jump",
               Content = "Infinite Jump Enabled!",
               Duration = 3,
               Image = "check"
           })
       else
           -- Disable Infinite Jump
           if jumpConnection then
               jumpConnection:Disconnect()
               jumpConnection = nil
           end
           Rayfield:Notify({
               Title = "Infinite Jump",
               Content = "Infinite Jump Disabled!",
               Duration = 3,
               Image = "x"
           })
       end
   end,
})

local Slider = MainTab:CreateSlider({
   Name = "WalkSpeed",
   Range = {0, 1000},
   Increment = 5,
   Suffix = "Walkspeed",
   CurrentValue = 0,
   Flag = "Slider1",
   Callback = function(Value)
       local player = game.Players.LocalPlayer
       if player and player.Character and player.Character.Humanoid then
           player.Character.Humanoid.WalkSpeed = Value
       end
   end,
})
